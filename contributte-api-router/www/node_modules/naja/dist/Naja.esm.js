/*
 * Naja.js
 * 2.1.5
 *
 * by Jiří Pudil <https://jiripudil.cz>
 */
import { EventTarget as EventTarget$1 } from 'event-target-shim';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

(function (factory) {
  factory();
}((function () {
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  var Emitter = /*#__PURE__*/function () {
    function Emitter() {
      _classCallCheck(this, Emitter);

      Object.defineProperty(this, 'listeners', {
        value: {},
        writable: true,
        configurable: true
      });
    }

    _createClass(Emitter, [{
      key: "addEventListener",
      value: function addEventListener(type, callback, options) {
        if (!(type in this.listeners)) {
          this.listeners[type] = [];
        }

        this.listeners[type].push({
          callback: callback,
          options: options
        });
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(type, callback) {
        if (!(type in this.listeners)) {
          return;
        }

        var stack = this.listeners[type];

        for (var i = 0, l = stack.length; i < l; i++) {
          if (stack[i].callback === callback) {
            stack.splice(i, 1);
            return;
          }
        }
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(event) {
        if (!(event.type in this.listeners)) {
          return;
        }

        var stack = this.listeners[event.type];
        var stackToCall = stack.slice();

        for (var i = 0, l = stackToCall.length; i < l; i++) {
          var listener = stackToCall[i];

          try {
            listener.callback.call(this, event);
          } catch (e) {
            Promise.resolve().then(function () {
              throw e;
            });
          }

          if (listener.options && listener.options.once) {
            this.removeEventListener(event.type, listener.callback);
          }
        }

        return !event.defaultPrevented;
      }
    }]);

    return Emitter;
  }();

  var AbortSignal = /*#__PURE__*/function (_Emitter) {
    _inherits(AbortSignal, _Emitter);

    var _super = _createSuper(AbortSignal);

    function AbortSignal() {
      var _this;

      _classCallCheck(this, AbortSignal);

      _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
      // constructor has failed to run, then "this.listeners" will still be undefined and then we call
      // the parent constructor directly instead as a workaround. For general details, see babel bug:
      // https://github.com/babel/babel/issues/3041
      // This hack was added as a fix for the issue described here:
      // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042

      if (!_this.listeners) {
        Emitter.call(_assertThisInitialized(_this));
      } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
      // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl


      Object.defineProperty(_assertThisInitialized(_this), 'aborted', {
        value: false,
        writable: true,
        configurable: true
      });
      Object.defineProperty(_assertThisInitialized(_this), 'onabort', {
        value: null,
        writable: true,
        configurable: true
      });
      return _this;
    }

    _createClass(AbortSignal, [{
      key: "toString",
      value: function toString() {
        return '[object AbortSignal]';
      }
    }, {
      key: "dispatchEvent",
      value: function dispatchEvent(event) {
        if (event.type === 'abort') {
          this.aborted = true;

          if (typeof this.onabort === 'function') {
            this.onabort.call(this, event);
          }
        }

        _get(_getPrototypeOf(AbortSignal.prototype), "dispatchEvent", this).call(this, event);
      }
    }]);

    return AbortSignal;
  }(Emitter);
  var AbortController = /*#__PURE__*/function () {
    function AbortController() {
      _classCallCheck(this, AbortController);

      // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
      // we want Object.keys(new AbortController()) to be [] for compat with the native impl
      Object.defineProperty(this, 'signal', {
        value: new AbortSignal(),
        writable: true,
        configurable: true
      });
    }

    _createClass(AbortController, [{
      key: "abort",
      value: function abort() {
        var event;

        try {
          event = new Event('abort');
        } catch (e) {
          if (typeof document !== 'undefined') {
            if (!document.createEvent) {
              // For Internet Explorer 8:
              event = document.createEventObject();
              event.type = 'abort';
            } else {
              // For Internet Explorer 11:
              event = document.createEvent('Event');
              event.initEvent('abort', false, false);
            }
          } else {
            // Fallback where document isn't available:
            event = {
              type: 'abort',
              bubbles: false,
              cancelable: false
            };
          }
        }

        this.signal.dispatchEvent(event);
      }
    }, {
      key: "toString",
      value: function toString() {
        return '[object AbortController]';
      }
    }]);

    return AbortController;
  }();

  if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
    // These are necessary to make sure that we get correct output for:
    // Object.prototype.toString.call(new AbortController())
    AbortController.prototype[Symbol.toStringTag] = 'AbortController';
    AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';
  }

  function polyfillNeeded(self) {
    if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
      console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
      return true;
    } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
    // defining window.Request, and this polyfill need to work on top of unfetch
    // so the below feature detection needs the !self.AbortController part.
    // The Request.prototype check is also needed because Safari versions 11.1.2
    // up to and including 12.1.x has a window.AbortController present but still
    // does NOT correctly implement abortable fetch:
    // https://bugs.webkit.org/show_bug.cgi?id=174980#c2


    return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
  }

  /**
   * Note: the "fetch.Request" default value is available for fetch imported from
   * the "node-fetch" package and not in browsers. This is OK since browsers
   * will be importing umd-polyfill.js from that path "self" is passed the
   * decorator so the default value will not be used (because browsers that define
   * fetch also has Request). One quirky setup where self.fetch exists but
   * self.Request does not is when the "unfetch" minimal fetch polyfill is used
   * on top of IE11; for this case the browser will try to use the fetch.Request
   * default value which in turn will be undefined but then then "if (Request)"
   * will ensure that you get a patched fetch but still no Request (as expected).
   * @param {fetch, Request = fetch.Request}
   * @returns {fetch: abortableFetch, Request: AbortableRequest}
   */

  function abortableFetchDecorator(patchTargets) {
    if ('function' === typeof patchTargets) {
      patchTargets = {
        fetch: patchTargets
      };
    }

    var _patchTargets = patchTargets,
        fetch = _patchTargets.fetch,
        _patchTargets$Request = _patchTargets.Request,
        NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request,
        NativeAbortController = _patchTargets.AbortController,
        _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,
        __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;

    if (!polyfillNeeded({
      fetch: fetch,
      Request: NativeRequest,
      AbortController: NativeAbortController,
      __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL
    })) {
      return {
        fetch: fetch,
        Request: Request
      };
    }

    var Request = NativeRequest; // Note that the "unfetch" minimal fetch polyfill defines fetch() without
    // defining window.Request, and this polyfill need to work on top of unfetch
    // hence we only patch it if it's available. Also we don't patch it if signal
    // is already available on the Request prototype because in this case support
    // is present and the patching below can cause a crash since it assigns to
    // request.signal which is technically a read-only property. This latter error
    // happens when you run the main5.js node-fetch example in the repo
    // "abortcontroller-polyfill-examples". The exact error is:
    //   request.signal = init.signal;
    //   ^
    // TypeError: Cannot set property signal of #<Request> which has only a getter

    if (Request && !Request.prototype.hasOwnProperty('signal') || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
      Request = function Request(input, init) {
        var signal;

        if (init && init.signal) {
          signal = init.signal; // Never pass init.signal to the native Request implementation when the polyfill has
          // been installed because if we're running on top of a browser with a
          // working native AbortController (i.e. the polyfill was installed due to
          // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
          // fake AbortSignal to the native fetch will trigger:
          // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.

          delete init.signal;
        }

        var request = new NativeRequest(input, init);

        if (signal) {
          Object.defineProperty(request, 'signal', {
            writable: false,
            enumerable: false,
            configurable: true,
            value: signal
          });
        }

        return request;
      };

      Request.prototype = NativeRequest.prototype;
    }

    var realFetch = fetch;

    var abortableFetch = function abortableFetch(input, init) {
      var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;

      if (signal) {
        var abortError;

        try {
          abortError = new DOMException('Aborted', 'AbortError');
        } catch (err) {
          // IE 11 does not support calling the DOMException constructor, use a
          // regular error object on it instead.
          abortError = new Error('Aborted');
          abortError.name = 'AbortError';
        } // Return early if already aborted, thus avoiding making an HTTP request


        if (signal.aborted) {
          return Promise.reject(abortError);
        } // Turn an event into a promise, reject it once `abort` is dispatched


        var cancellation = new Promise(function (_, reject) {
          signal.addEventListener('abort', function () {
            return reject(abortError);
          }, {
            once: true
          });
        });

        if (init && init.signal) {
          // Never pass .signal to the native implementation when the polyfill has
          // been installed because if we're running on top of a browser with a
          // working native AbortController (i.e. the polyfill was installed due to
          // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
          // fake AbortSignal to the native fetch will trigger:
          // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.
          delete init.signal;
        } // Return the fastest promise (don't need to wait for request to finish)


        return Promise.race([cancellation, realFetch(input, init)]);
      }

      return realFetch(input, init);
    };

    return {
      fetch: abortableFetch,
      Request: Request
    };
  }

  (function (self) {

    if (!polyfillNeeded(self)) {
      return;
    }

    if (!self.fetch) {
      console.warn('fetch() is not available, cannot install abortcontroller-polyfill');
      return;
    }

    var _abortableFetch = abortableFetchDecorator(self),
        fetch = _abortableFetch.fetch,
        Request = _abortableFetch.Request;

    self.fetch = fetch;
    self.Request = Request;
    Object.defineProperty(self, 'AbortController', {
      writable: true,
      enumerable: false,
      configurable: true,
      value: AbortController
    });
    Object.defineProperty(self, 'AbortSignal', {
      writable: true,
      enumerable: false,
      configurable: true,
      value: AbortSignal
    });
  })(typeof self !== 'undefined' ? self : commonjsGlobal);

})));

// https://bugs.webkit.org/show_bug.cgi?id=174980

try {
  new window.EventTarget();
} catch (error) {
  window.EventTarget = EventTarget$1;
}

class AssertionError extends Error {
}
const assert = (condition, description) => {
    if (!condition) {
        const message = `Assertion failed${description !== undefined ? `: ${description}` : '.'}`;
        throw new AssertionError(message);
    }
};

class UIHandler extends EventTarget {
    constructor(naja) {
        super();
        this.naja = naja;
        this.selector = '.ajax';
        this.allowedOrigins = [window.location.origin];
        this.handler = this.handleUI.bind(this);
        naja.addEventListener('init', this.initialize.bind(this));
    }
    initialize() {
        this.bindUI(window.document.body);
        this.naja.snippetHandler.addEventListener('afterUpdate', (event) => {
            const { snippet } = event.detail;
            this.bindUI(snippet);
        });
    }
    bindUI(element) {
        const selectors = [
            `a${this.selector}`,
            `input[type="submit"]${this.selector}`,
            `input[type="image"]${this.selector}`,
            `button[type="submit"]${this.selector}`,
            `form${this.selector} input[type="submit"]`,
            `form${this.selector} input[type="image"]`,
            `form${this.selector} button[type="submit"]`,
        ].join(', ');
        const bindElement = (element) => {
            element.removeEventListener('click', this.handler);
            element.addEventListener('click', this.handler);
        };
        const elements = element.querySelectorAll(selectors);
        for (let i = 0; i < elements.length; i++) {
            bindElement(elements.item(i));
        }
        if (element.matches(selectors)) {
            bindElement(element);
        }
        const bindForm = (form) => {
            form.removeEventListener('submit', this.handler);
            form.addEventListener('submit', this.handler);
        };
        if (element.matches(`form${this.selector}`)) {
            bindForm(element);
        }
        const forms = element.querySelectorAll(`form${this.selector}`);
        for (let i = 0; i < forms.length; i++) {
            bindForm(forms.item(i));
        }
    }
    handleUI(event) {
        const mouseEvent = event;
        if (mouseEvent.altKey || mouseEvent.ctrlKey || mouseEvent.shiftKey || mouseEvent.metaKey || mouseEvent.button) {
            return;
        }
        const element = event.currentTarget;
        const options = {};
        const ignoreErrors = () => {
            // don't reject the promise in case of an error as developers have no way of handling the rejection
            // in this situation; errors should be handled in `naja.addEventListener('error', errorHandler)`
        };
        if (event.type === 'submit') {
            this.submitForm(element, options, event).catch(ignoreErrors);
        }
        else if (event.type === 'click') {
            this.clickElement(element, options, mouseEvent).catch(ignoreErrors);
        }
    }
    async clickElement(element, options = {}, event) {
        var _a, _b, _c, _d, _e, _f;
        let method = 'GET', url = '', data;
        if (!this.dispatchEvent(new CustomEvent('interaction', { cancelable: true, detail: { element, originalEvent: event, options } }))) {
            event === null || event === void 0 ? void 0 : event.preventDefault();
            return {};
        }
        if (element.tagName === 'A') {
            assert(element instanceof HTMLAnchorElement);
            method = 'GET';
            url = element.href;
            data = null;
        }
        else if (element.tagName === 'INPUT' || element.tagName === 'BUTTON') {
            assert(element instanceof HTMLInputElement || element instanceof HTMLButtonElement);
            const { form } = element;
            // eslint-disable-next-line no-nested-ternary,no-extra-parens
            method = (_d = (_b = (_a = element.getAttribute('formmethod')) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : (_c = form === null || form === void 0 ? void 0 : form.getAttribute('method')) === null || _c === void 0 ? void 0 : _c.toUpperCase()) !== null && _d !== void 0 ? _d : 'GET';
            url = (_f = (_e = element.getAttribute('formaction')) !== null && _e !== void 0 ? _e : form === null || form === void 0 ? void 0 : form.getAttribute('action')) !== null && _f !== void 0 ? _f : window.location.pathname + window.location.search;
            data = new FormData(form !== null && form !== void 0 ? form : undefined);
            if (element.type === 'submit' || element.tagName === 'BUTTON') {
                data.append(element.name, element.value || '');
            }
            else if (element.type === 'image') {
                const coords = element.getBoundingClientRect();
                data.append(`${element.name}.x`, Math.max(0, Math.floor(event !== undefined ? event.pageX - coords.left : 0)));
                data.append(`${element.name}.y`, Math.max(0, Math.floor(event !== undefined ? event.pageY - coords.top : 0)));
            }
        }
        if (!this.isUrlAllowed(url)) {
            throw new Error(`Cannot dispatch async request, URL is not allowed: ${url}`);
        }
        event === null || event === void 0 ? void 0 : event.preventDefault();
        return this.naja.makeRequest(method, url, data, options);
    }
    async submitForm(form, options = {}, event) {
        var _a, _b, _c;
        if (!this.dispatchEvent(new CustomEvent('interaction', { cancelable: true, detail: { element: form, originalEvent: event, options } }))) {
            event === null || event === void 0 ? void 0 : event.preventDefault();
            return {};
        }
        const method = (_b = (_a = form.getAttribute('method')) === null || _a === void 0 ? void 0 : _a.toUpperCase()) !== null && _b !== void 0 ? _b : 'GET';
        const url = (_c = form.getAttribute('action')) !== null && _c !== void 0 ? _c : window.location.pathname + window.location.search;
        const data = new FormData(form);
        if (!this.isUrlAllowed(url)) {
            throw new Error(`Cannot dispatch async request, URL is not allowed: ${url}`);
        }
        event === null || event === void 0 ? void 0 : event.preventDefault();
        return this.naja.makeRequest(method, url, data, options);
    }
    isUrlAllowed(url) {
        const urlObject = new URL(url, location.href);
        // ignore non-URL URIs (javascript:, data:, mailto:, ...)
        if (urlObject.origin === 'null') {
            return false;
        }
        return this.allowedOrigins.includes(urlObject.origin);
    }
}

class FormsHandler {
    constructor(naja) {
        this.naja = naja;
        naja.addEventListener('init', this.initialize.bind(this));
        naja.uiHandler.addEventListener('interaction', this.processForm.bind(this));
    }
    initialize() {
        this.initForms(window.document.body);
        this.naja.snippetHandler.addEventListener('afterUpdate', (event) => {
            const { snippet } = event.detail;
            this.initForms(snippet);
        });
    }
    initForms(element) {
        const netteForms = this.netteForms || window.Nette;
        if (netteForms) {
            if (element.tagName === 'form') {
                netteForms.initForm(element);
            }
            const forms = element.querySelectorAll('form');
            for (let i = 0; i < forms.length; i++) {
                netteForms.initForm(forms.item(i));
            }
        }
    }
    processForm(event) {
        const { element, originalEvent } = event.detail;
        const inputElement = element;
        if (inputElement.form !== undefined && inputElement.form !== null) {
            inputElement.form['nette-submittedBy'] = element;
        }
        const netteForms = this.netteForms || window.Nette;
        if ((element.tagName === 'FORM' || element.form) && netteForms && !netteForms.validateForm(element)) {
            if (originalEvent) {
                originalEvent.stopImmediatePropagation();
                originalEvent.preventDefault();
            }
            event.preventDefault();
        }
    }
}

class RedirectHandler extends EventTarget {
    constructor(naja) {
        super();
        this.naja = naja;
        naja.uiHandler.addEventListener('interaction', (event) => {
            var _a, _b, _c;
            const { element, options } = event.detail;
            if (!element) {
                return;
            }
            if (element.hasAttribute('data-naja-force-redirect') || ((_a = element.form) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-naja-force-redirect'))) {
                const value = (_b = element.getAttribute('data-naja-force-redirect')) !== null && _b !== void 0 ? _b : (_c = element.form) === null || _c === void 0 ? void 0 : _c.getAttribute('data-naja-force-redirect');
                options.forceRedirect = value !== 'off';
            }
        });
        naja.addEventListener('success', (event) => {
            var _a;
            const { payload, options } = event.detail;
            if (payload.redirect) {
                this.makeRedirect(payload.redirect, (_a = options.forceRedirect) !== null && _a !== void 0 ? _a : false, options);
                event.stopImmediatePropagation();
            }
        });
        this.locationAdapter = {
            assign: (url) => window.location.assign(url),
        };
    }
    makeRedirect(url, force, options = {}) {
        if (url instanceof URL) {
            url = url.href;
        }
        let isHardRedirect = force || !this.naja.uiHandler.isUrlAllowed(url);
        const canRedirect = this.dispatchEvent(new CustomEvent('redirect', {
            cancelable: true,
            detail: {
                url,
                isHardRedirect,
                setHardRedirect(value) {
                    isHardRedirect = !!value;
                },
                options,
            },
        }));
        if (!canRedirect) {
            return;
        }
        if (isHardRedirect) {
            this.locationAdapter.assign(url);
        }
        else {
            this.naja.makeRequest('GET', url, null, options);
        }
    }
}

class SnippetHandler extends EventTarget {
    constructor(naja) {
        super();
        this.naja = naja;
        this.op = {
            replace: (snippet, content) => {
                snippet.innerHTML = content;
            },
            prepend: (snippet, content) => snippet.insertAdjacentHTML('afterbegin', content),
            append: (snippet, content) => snippet.insertAdjacentHTML('beforeend', content),
        };
        naja.addEventListener('success', (event) => {
            const { options, payload } = event.detail;
            if (payload.snippets) {
                this.updateSnippets(payload.snippets, false, options);
            }
        });
    }
    updateSnippets(snippets, fromCache = false, options = {}) {
        Object.keys(snippets).forEach((id) => {
            const snippet = document.getElementById(id);
            if (snippet) {
                this.updateSnippet(snippet, snippets[id], fromCache, options);
            }
        });
    }
    updateSnippet(snippet, content, fromCache, options) {
        let operation = this.op.replace;
        if ((snippet.hasAttribute('data-naja-snippet-prepend') || snippet.hasAttribute('data-ajax-prepend')) && !fromCache) {
            operation = this.op.prepend;
        }
        else if ((snippet.hasAttribute('data-naja-snippet-append') || snippet.hasAttribute('data-ajax-append')) && !fromCache) {
            operation = this.op.append;
        }
        const canUpdate = this.dispatchEvent(new CustomEvent('beforeUpdate', {
            cancelable: true,
            detail: {
                snippet,
                content,
                fromCache,
                operation,
                changeOperation(value) {
                    operation = value;
                },
                options,
            },
        }));
        if (!canUpdate) {
            return;
        }
        if (snippet.tagName.toLowerCase() === 'title') {
            document.title = content;
        }
        else {
            operation(snippet, content);
        }
        this.dispatchEvent(new CustomEvent('afterUpdate', {
            cancelable: true,
            detail: {
                snippet,
                content,
                fromCache,
                operation,
                options,
            },
        }));
    }
}

class HistoryHandler {
    constructor(naja) {
        this.naja = naja;
        this.href = null;
        this.popStateHandler = this.handlePopState.bind(this);
        this.uiCache = true;
        naja.addEventListener('init', this.initialize.bind(this));
        naja.addEventListener('before', this.saveUrl.bind(this));
        naja.addEventListener('success', this.pushNewState.bind(this));
        naja.uiHandler.addEventListener('interaction', this.configureMode.bind(this));
        this.historyAdapter = {
            replaceState: (data, title, url) => window.history.replaceState(data, title, url),
            pushState: (data, title, url) => window.history.pushState(data, title, url),
        };
    }
    initialize(event) {
        const { defaultOptions } = event.detail;
        if ('historyUiCache' in defaultOptions && defaultOptions.historyUiCache !== undefined) {
            this.uiCache = defaultOptions.historyUiCache;
        }
        window.addEventListener('popstate', this.popStateHandler);
        this.historyAdapter.replaceState(this.buildState(window.location.href, this.uiCache), window.document.title, window.location.href);
    }
    handlePopState(e) {
        if (!e.state) {
            return;
        }
        if (e.state.ui) {
            this.handleSnippets(e.state.ui);
            this.handleTitle(e.state.title);
        }
        else if (e.state.ui === false) {
            this.naja.makeRequest('GET', e.state.href, null, {
                history: false,
                historyUiCache: false,
            });
        }
    }
    saveUrl(event) {
        const { url } = event.detail;
        this.href = url;
    }
    configureMode(event) {
        var _a, _b, _c, _d, _e, _f;
        const { element, options } = event.detail;
        // propagate mode to options
        if (!element) {
            return;
        }
        if (element.hasAttribute('data-naja-history') || ((_a = element.form) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-naja-history'))) {
            const value = (_b = element.getAttribute('data-naja-history')) !== null && _b !== void 0 ? _b : (_c = element.form) === null || _c === void 0 ? void 0 : _c.getAttribute('data-naja-history');
            options.history = HistoryHandler.normalizeMode(value);
        }
        if (element.hasAttribute('data-naja-history-cache') || ((_d = element.form) === null || _d === void 0 ? void 0 : _d.hasAttribute('data-naja-history-nocache'))) {
            const value = (_e = element.getAttribute('data-naja-history-cache')) !== null && _e !== void 0 ? _e : (_f = element.form) === null || _f === void 0 ? void 0 : _f.getAttribute('data-naja-history-cache');
            options.historyUiCache = value !== 'off';
        }
    }
    static normalizeMode(mode) {
        if (mode === 'off' || mode === false) {
            return false;
        }
        else if (mode === 'replace') {
            return 'replace';
        }
        return true;
    }
    pushNewState(event) {
        const { payload, options } = event.detail;
        const mode = HistoryHandler.normalizeMode(options.history);
        if (mode === false) {
            return;
        }
        if (payload.postGet && payload.url) {
            this.href = payload.url;
        }
        const method = mode === 'replace' ? 'replaceState' : 'pushState';
        const uiCache = options.historyUiCache === true || (options.historyUiCache !== false && this.uiCache); // eslint-disable-line no-extra-parens
        this.historyAdapter[method](this.buildState(this.href, uiCache), window.document.title, this.href);
        this.href = null;
    }
    buildState(href, uiCache) {
        const state = {
            href,
        };
        if (uiCache) {
            state.title = window.document.title;
            state.ui = this.findSnippets();
        }
        else {
            state.ui = false;
        }
        return state;
    }
    findSnippets() {
        const result = {};
        const snippets = window.document.querySelectorAll('[id^="snippet-"]');
        for (let i = 0; i < snippets.length; i++) {
            const snippet = snippets.item(i);
            if (!snippet.hasAttribute('data-naja-history-nocache') && !snippet.hasAttribute('data-history-nocache')) {
                result[snippet.id] = snippet.innerHTML;
            }
        }
        return result;
    }
    handleSnippets(snippets) {
        this.naja.snippetHandler.updateSnippets(snippets, true);
        this.naja.scriptLoader.loadScripts(snippets);
    }
    handleTitle(title) {
        window.document.title = title;
    }
}

class ScriptLoader {
    constructor(naja) {
        naja.addEventListener('success', (event) => {
            const { payload } = event.detail;
            if (payload.snippets) {
                this.loadScripts(payload.snippets);
            }
        });
    }
    loadScripts(snippets) {
        Object.keys(snippets).forEach((id) => {
            const content = snippets[id];
            if (!/<script/i.test(content)) {
                return;
            }
            const el = window.document.createElement('div');
            el.innerHTML = content;
            const scripts = el.querySelectorAll('script');
            for (let i = 0; i < scripts.length; i++) {
                const script = scripts.item(i);
                const scriptEl = window.document.createElement('script');
                scriptEl.innerHTML = script.innerHTML;
                if (script.hasAttributes()) {
                    const attrs = script.attributes;
                    for (let j = 0; j < attrs.length; j++) {
                        const attrName = attrs[j].name;
                        scriptEl.setAttribute(attrName, attrs[j].value);
                    }
                }
                window.document.head.appendChild(scriptEl)
                    .parentNode.removeChild(scriptEl);
            }
        });
    }
}

class Naja extends EventTarget {
    constructor(uiHandler, redirectHandler, snippetHandler, formsHandler, historyHandler, scriptLoader) {
        super();
        this.VERSION = 2;
        this.initialized = false;
        this.extensions = [];
        this.defaultOptions = {};
        this.uiHandler = uiHandler ? new uiHandler(this) : new UIHandler(this);
        this.redirectHandler = redirectHandler ? new redirectHandler(this) : new RedirectHandler(this);
        this.snippetHandler = snippetHandler ? new snippetHandler(this) : new SnippetHandler(this);
        this.formsHandler = formsHandler ? new formsHandler(this) : new FormsHandler(this);
        this.historyHandler = historyHandler ? new historyHandler(this) : new HistoryHandler(this);
        this.scriptLoader = scriptLoader ? new scriptLoader(this) : new ScriptLoader(this);
    }
    registerExtension(extension) {
        if (this.initialized) {
            extension.initialize(this);
        }
        this.extensions.push(extension);
    }
    initialize(defaultOptions = {}) {
        if (this.initialized) {
            throw new Error('Cannot initialize Naja, it is already initialized.');
        }
        this.defaultOptions = defaultOptions;
        this.extensions.forEach((extension) => extension.initialize(this));
        this.dispatchEvent(new CustomEvent('init', { detail: { defaultOptions } }));
        this.initialized = true;
    }
    async makeRequest(method, url, data = null, options = {}) {
        // normalize url to instanceof URL
        if (typeof url === 'string') {
            url = new URL(url, location.href);
        }
        options = Object.assign(Object.assign(Object.assign({}, this.defaultOptions), options), { fetch: Object.assign(Object.assign({}, this.defaultOptions.fetch || {}), options.fetch || {}) });
        const headers = new Headers(options.fetch.headers || {});
        const body = this.transformData(url, method, data);
        const abortController = new AbortController();
        const request = new Request(url.toString(), Object.assign(Object.assign({ credentials: 'same-origin' }, options.fetch), { method,
            headers,
            body, signal: abortController.signal }));
        // impersonate XHR so that Nette can detect isAjax()
        request.headers.set('X-Requested-With', 'XMLHttpRequest');
        if (!this.dispatchEvent(new CustomEvent('before', { cancelable: true, detail: { request, method, url: url.toString(), data, options } }))) {
            return {};
        }
        const promise = window.fetch(request);
        this.dispatchEvent(new CustomEvent('start', { detail: { request, promise, abortController, options } }));
        let response, payload;
        try {
            response = await promise;
            if (!response.ok) {
                throw new HttpError(response);
            }
            payload = await response.json();
        }
        catch (error) {
            if (error.name === 'AbortError') {
                this.dispatchEvent(new CustomEvent('abort', { detail: { request, error, options } }));
                this.dispatchEvent(new CustomEvent('complete', { detail: { request, response, payload: undefined, error, options } }));
                return {};
            }
            this.dispatchEvent(new CustomEvent('error', { detail: { request, response, error, options } }));
            this.dispatchEvent(new CustomEvent('complete', { detail: { request, response, payload: undefined, error, options } }));
            throw error;
        }
        this.dispatchEvent(new CustomEvent('success', { detail: { request, response, payload, options } }));
        this.dispatchEvent(new CustomEvent('complete', { detail: { request, response, payload, error: undefined, options } }));
        return payload;
    }
    appendToQueryString(searchParams, key, value) {
        if (value === null || value === undefined) {
            return;
        }
        if (Array.isArray(value)) {
            let index = 0;
            for (const subvalue of value) {
                this.appendToQueryString(searchParams, `${key}[${index++}]`, subvalue);
            }
        }
        else if (Object.getPrototypeOf(value) === Object.prototype) {
            for (const [subkey, subvalue] of Object.entries(value)) {
                this.appendToQueryString(searchParams, `${key}[${subkey}]`, subvalue);
            }
        }
        else {
            searchParams.append(key, String(value));
        }
    }
    transformData(url, method, data) {
        const isGet = ['GET', 'HEAD'].includes(method.toUpperCase());
        // sending a form via GET -> serialize FormData into URL and return empty request body
        if (isGet && data instanceof FormData) {
            for (const [key, value] of data) {
                if (value !== null && value !== undefined) {
                    url.searchParams.append(key, String(value));
                }
            }
            return null;
        }
        // sending a POJO -> serialize it recursively into URLSearchParams
        const isDataPojo = data !== null && Object.getPrototypeOf(data) === Object.prototype;
        if (isDataPojo) {
            // for GET requests, append values to URL and return empty request body
            // otherwise build `new URLSearchParams()` to act as the request body
            const transformedData = isGet ? url.searchParams : new URLSearchParams();
            for (const [key, value] of Object.entries(data)) {
                this.appendToQueryString(transformedData, key, value);
            }
            return isGet
                ? null
                : transformedData;
        }
        return data;
    }
}
class HttpError extends Error {
    constructor(response) {
        const message = `HTTP ${response.status}: ${response.statusText}`;
        super(message);
        this.name = this.constructor.name;
        this.stack = new Error(message).stack;
        this.response = response;
    }
}

class AbortExtension {
    constructor() {
        this.abortable = true;
        this.abortController = null;
    }
    initialize(naja) {
        naja.uiHandler.addEventListener('interaction', this.checkAbortable.bind(this));
        naja.addEventListener('init', this.onInitialize.bind(this));
        naja.addEventListener('before', this.checkAbortable.bind(this));
        naja.addEventListener('start', this.saveAbortController.bind(this));
        naja.addEventListener('complete', this.clearAbortController.bind(this));
    }
    onInitialize() {
        document.addEventListener('keydown', (event) => {
            if (this.abortController !== null
                && event.key === 'Escape'
                && !(event.ctrlKey || event.shiftKey || event.altKey || event.metaKey)
                && this.abortable) {
                this.abortController.abort();
                this.abortController = null;
            }
        });
    }
    checkAbortable(event) {
        var _a, _b;
        const { options } = event.detail;
        this.abortable = 'element' in event.detail
            ? ((_a = event.detail.element.getAttribute('data-naja-abort')) !== null && _a !== void 0 ? _a : (_b = event.detail.element.form) === null || _b === void 0 ? void 0 : _b.getAttribute('data-naja-abort')) !== 'off' // eslint-disable-line no-extra-parens
            : options.abort !== false;
        // propagate to options if called in interaction event
        options.abort = this.abortable;
    }
    saveAbortController(event) {
        const { abortController } = event.detail;
        this.abortController = abortController;
    }
    clearAbortController() {
        this.abortController = null;
        this.abortable = true;
    }
}

class UniqueExtension {
    constructor() {
        this.abortControllers = new Map();
    }
    initialize(naja) {
        naja.uiHandler.addEventListener('interaction', this.checkUniqueness.bind(this));
        naja.addEventListener('start', this.abortPreviousRequest.bind(this));
        naja.addEventListener('complete', this.clearRequest.bind(this));
    }
    checkUniqueness(event) {
        var _a, _b;
        const { element, options } = event.detail;
        const unique = (_a = element.getAttribute('data-naja-unique')) !== null && _a !== void 0 ? _a : (_b = element.form) === null || _b === void 0 ? void 0 : _b.getAttribute('data-naja-unique');
        options.unique = unique === 'off' ? false : unique !== null && unique !== void 0 ? unique : 'default';
    }
    abortPreviousRequest(event) {
        var _a, _b, _c;
        const { abortController, options } = event.detail;
        if (options.unique !== false) {
            (_b = this.abortControllers.get((_a = options.unique) !== null && _a !== void 0 ? _a : 'default')) === null || _b === void 0 ? void 0 : _b.abort();
            this.abortControllers.set((_c = options.unique) !== null && _c !== void 0 ? _c : 'default', abortController);
        }
    }
    clearRequest(event) {
        var _a;
        const { request, options } = event.detail;
        if (!request.signal.aborted && options.unique !== false) {
            this.abortControllers.delete((_a = options.unique) !== null && _a !== void 0 ? _a : 'default');
        }
    }
}

const naja = new Naja();
naja.registerExtension(new AbortExtension());
naja.registerExtension(new UniqueExtension());

export default naja;
export { HttpError, Naja };
//# sourceMappingURL=Naja.esm.js.map
